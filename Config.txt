#Sample config file for GPalta

# --------------- Files -------------------
saveFileName = evo.bin
nodeConfigFileName = NodeConfig.txt
logFileName = log.txt

# ----------- Basic GP options ------------
# population = gpalta.core.SingleTreePopulation
population = gpalta.multitree.MultiTreePopulation
populationSize = 500
nGenerations = 1000

maxDepth = 9
initialMinDepth = 3
initialMaxDepth = 6

# Upper limits for the probability regions of the tree operations. This means:
# probability of crossover = upLimitProbCrossOver - 0
# probability of mutation = upLimitProbMutation - upLimitProbCrossOver
# probability of reproduction = 1 - upLimitProbMutation
upLimitProbCrossOver = 0.85
upLimitProbMutation = 0.9
#The rest is for reproduction

# limits for constants:
constLowLimit = -100
constUpLimit = 100

maxCrossoverTries = 10

# When selecting for crossover, use these probs
upLimitProbSelectTerminal = .1
upLimitProbSelectNonTerminal = 1
upLimitProbSelectRoot = 0
#The rest is for select any node

# For ramped half and half tree creation
probGrowBuild = .5
#The rest is for Full Build


# -------------- Selection ---------------
# Tree selection methods: tournament, roulette, proportional, SUS
selectionMethod = gpalta.ops.IndSelectorTournament
# for tournament selection:
tournamentSize = 2
SUSPointerDistance = 0.1
# Population ranking adjustment (unused in case of tournament selection method): Raw, LFR
rankingType = gpalta.ops.RankingRaw

#---------------- Fitness -----------------------
# generic or clustering
# fitness = gpalta.core.FitnessClassic
fitness = gpalta.core.FitnessSammon

# stop if fitness reaches this value:
stopFitness = 0.99

# fitness will be: 
# f' = (1-sizePenalization*treeDepth/maxDepth)*f
sizePenalization = 0

# For the clustering fitness:
nClasses = 2
sigma = 0

#------------ General behavior ------------
# Use vectorial evaluation
# On this mode, the system descends on the tree once and evaluates all fitness
# cases on a loop. On the contrary, when using normal evaluation, the system
# descends on the tree for each fitness case.
# The number of operations is the same, but vectorial evaluation should be
# faster when using lots of fitness cases.
# Note that with vectorial evaluation, all nodes on the tree are always
# evaluated. Instead, when using normal evaluation, sometimes the second kid
# doesn't need to be evaluated because the result can be determined using
# only the first kid (e.g on an "And" node if the first kid evals to zero)
# This could eventually lead to a slowdown instead of speeding things up,
# or cause problems when nodes have side effects (perform actions)

useVect = true

# If true, trees that haven't changed from the past generation will remember
# their fitness and won't be evaluated again.
# WARNING: do not use if some values change between generations (e.g. cicling
# fitness cases, random components in terminals, etc.)

rememberLastEval = true

# These two for non interactive mode
nonInteractive = false
nDaysToRun = 1
