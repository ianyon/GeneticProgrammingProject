parent.0 = ../libs/ecj/ec/gp/koza/koza.params
###########################################################################################
# Number of threads and random number generator seeds
breedthreads = auto
evalthreads = auto
# seed.0 = 4357

# The Statistics
stat = cl.ian.gp.statistics.SimpleGPStatistics
stat.do-final = true
# stat.only-final = true
# stat.silent = true
stat.file = $out.stat
stat.validation-file = $TrainingData/doe500val.txt
stat.test-file = $TrainingData/doe500test.txt
stat.validation-output = $TrainingData/salidas_ansys500val.txt
stat.test-output = $TrainingData/salidas_ansys500test.txt

#stat.num-children = 1
# stat.child.0 = cl.ian.gp.statistics.MyKozaShortStatistics
# stat.child.0.silent = true
# stat.child.0.file = $out2.stat
# stat.child.0.do-depth = true
# stat.child.0.do-time = true
# stat.child.0.do-size = true
# stat.child.0.do-subpops = true
# gp.tree.print-style = c

#print-all-params = true
#print-accessed-params = true
#print-used-params = true
#print-unaccessed-params = true
#print-unused-params = true
#print-params = true
###########################################################################################
# Evolution Parameters
generations = 30
breed.elite-fraction.0 = 0.05
quit-on-run-complete = true

# The Population
pop.subpop.0.size = 200
pop.subpop.0.duplicate-retries = 20

# The class of the problem
eval.problem = cl.ian.gp.PhenomenologicalModelVerticalSlicing
# eval.problem = cl.ian.gp.PhenomenologicalModel
eval.problem.data = ec.app.regression.RegressionData
# Load input and output data for training
eval.problem.inputfile = $TrainingData/doe500train_sort.txt
# Vertical slicing: Random segments used to test the individuals (500 elements dataset)
eval.problem.number-of-slices = 4

pop.subpop.0.species.ind = cl.ian.gp.MyGPIndividual
pop.subpop.0.species.fitness = cl.ian.gp.HitLevelKozaFitness
pop.subpop.0.species.fitness.accepted-error = 5
pop.subpop.0.species.fitness.required-meeting-condition = 100

# QRampedInit (modified ramped half/half tree building) parameters
gp.tc.0.init = cl.ian.gp.KnownApproxRampedHalfHalfInit
# Min and Max level for initial individuals
gp.tc.0.init.min-depth = 2
gp.tc.0.init.max-depth = 6
gp.tc.0.init.growp = 0.5
################################## Breeding pipelines #####################################
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = true
pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = cl.ian.gp.RetriesCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.8
pop.subpop.0.species.pipe.source.1 = cl.ian.gp.RetriesMutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.2

# Crossover parameters
gp.koza.xover.tries = 20
gp.koza.xover.maxdepth = 17
# Return only one children (the other is thrown away)
gp.koza.xover.toss = false
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.source.0 = ec.parsimony.LexicographicTournamentSelection
gp.koza.xover.source.1 = same

# Mutation parameters
gp.koza.mutate.tries = 20
gp.koza.mutate.maxdepth = 17
gp.koza.mutate.pipe.ns = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.source.0 = ec.parsimony.LexicographicTournamentSelection
gp.koza.grow.min-depth = 2
gp.koza.grow.max-depth = 6

# select.tournament.size = 2
select.lexicographic-tournament.size = 2

# KozaNodeSelector Probability of selecting a type of node when performing breeding. Set to zero to pick any node
gp.koza.ns.terminals = 0.0
gp.koza.ns.nonterminals = 0.0
gp.koza.ns.root = 0.0
###########################################################################################